/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parking_vehiculos;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;

/**
 *
 * @author kevin
 */
public class Panel_retirar extends javax.swing.JPanel {

    String hora, minuto, Hora_completa;
    ArrayList<Vehiculos> arr = new ArrayList<>();
    boolean bandera_retirar = false;

    /**
     * Creates new form Panel_retirar
     */
    public Panel_retirar(ArrayList<Vehiculos> arr) {
        this.arr = arr;
        initComponents();
    }

    public String hora() {
        Calendar calendario = new GregorianCalendar();
        Date horaactual = new Date();
        calendario.setTime(horaactual);
        hora = calendario.get(Calendar.HOUR_OF_DAY) > 9 ? "" + calendario.get(Calendar.HOUR_OF_DAY) : "0" + calendario.get(Calendar.HOUR_OF_DAY);
        minuto = calendario.get(Calendar.MINUTE) > 9 ? "" + calendario.get(Calendar.MINUTE) : "0" + calendario.get(Calendar.MINUTE);
        return Hora_completa = hora + ":" + minuto;
    }

    private String fecha() {
        Date fecha = new Date();
        SimpleDateFormat formatofecha = new SimpleDateFormat("dd/MM/YYYY");
        return formatofecha.format(fecha);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txt_patente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(650, 500));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 0));
        jLabel1.setText("Retirar Vehiculo");

        txt_patente.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel2.setText("PATENTE");

        jButton1.setBackground(new java.awt.Color(51, 0, 0));
        jButton1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jButton1.setText("Retirar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(234, 234, 234)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_patente, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel2)))
                .addContainerGap(223, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(txt_patente, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(203, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        buscar();
        retirar_mensaje(bandera_retirar);
         bandera_retirar=false;
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txt_patente;
    // End of variables declaration//GEN-END:variables

//FUNCION PARA BUSCAR SI EL VEHICULO SE ENCUENTRA EN EL PARKING, LLAMA A RETIRAR
    //tambien se puede hacer arr.indexOf(Patente) busca la posicion del dato, si no lo encuentra =-1
    public void buscar() {

        String Patente;
        Patente = txt_patente.getText();
        for (int i = 0; i < arr.size(); i++) {
            if (Patente.equals(arr.get(i).Patente)) {
                txt_patente.setText("");
               
                calcular_costo(arr.get(i));   //funcion que calcule el tiempo que estuvo en el estacionamiento y el costo
                
                arr.remove(i);
                bandera_retirar = true;

            }
        }

    }

    //MENSAJES A MOSTRAR
    public void retirar_mensaje(boolean bandera_retirar) {
        if (bandera_retirar == false) {
            JOptionPane.showMessageDialog(null, "Vehiculo no encontrado, intente nuevamente");
            txt_patente.setText("");
        } else {

            JOptionPane.showMessageDialog(null, "VEHICULO RETIRADO. ");
          
        } 
    }

    //funcion que calcule los costos
    public void calcular_costo(Vehiculos ve) {

        int hora_retirada;
        float minutos_retirada;

        String e;
        e = ve.hora;//hora ingreso
        String s;
        s = ve.fecha;//fecha ingreso
        String[] fecha_salida = fecha().split("/");//array de fecha de salida String, tomo el reloj en el momento q presiona el boton
        String[] fecha_ingreso = s.split("/");//array de fecha de ingreso String, tomo los datos que pasa del arraylist
        String[] hora_ingreso = e.split(":");//array de horas de ingreso String, tomo la hora que me pasa del arraylist
        String[] tiempo_retirada = hora().split(":");//array de la hora de retirada string
        hora_retirada = Integer.parseInt(tiempo_retirada[0]); //hora de retirada int, tomo la hora q calculo en el momento que toca el boton
        minutos_retirada = Integer.parseInt(tiempo_retirada[1]);//minutos de retirada int, tomo los minutos q calculo en el momento que toca el boton

        Calendar cal = Calendar.getInstance();

        cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(fecha_ingreso[0]));
        cal.set(Calendar.MONTH, Integer.parseInt(fecha_ingreso[1]));
        cal.set(Calendar.YEAR, Integer.parseInt(fecha_ingreso[2]));
        Date firstDate = cal.getTime();

        cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(fecha_salida[0]));
        cal.set(Calendar.MONTH, Integer.parseInt(fecha_salida[1]));
        cal.set(Calendar.YEAR, Integer.parseInt(fecha_salida[2]));
        Date secondDate = cal.getTime();

        long diff = ((secondDate.getTime() - firstDate.getTime()) / 1000 / 60 / 60 / 24);//DIAS DE DIFERENCIA

        long horas_dif = hora_retirada - Integer.parseInt(hora_ingreso[0]);//diferencia de horas
        float horas_min_dif = (minutos_retirada - Integer.parseInt(hora_ingreso[1])) / 60;//diferencia de minutos, expresadas em horas

        float HORAS_TOTALES = diff * 24 + horas_dif + horas_min_dif;//suma de horas_totales=horas_dias + horas_horas + horas_minutos
        float HORAS_TOTALES_REDONDEADO;
        HORAS_TOTALES_REDONDEADO = Math.round(HORAS_TOTALES);

        int int_HORAS_TOTALES_REDONDEADO = (int) HORAS_TOTALES_REDONDEADO;
        int precio_med_hora = calcular_precio_media_hora(ve.Tipo);
        int precio_hora = calcular_precio_hora(ve.Tipo);

        int costo_total;
        if (HORAS_TOTALES % 1 <= 0.5) {
            //si se usa el parking antes que se complete media hora, igual el precio es de media hora
            HORAS_TOTALES_REDONDEADO = (float) (HORAS_TOTALES_REDONDEADO + 0.5);
            costo_total = int_HORAS_TOTALES_REDONDEADO * precio_hora + precio_med_hora;

        } else {
            //si se usa el parking mas de 30min pero menos de 1hora, el precio es de una hora
            costo_total = int_HORAS_TOTALES_REDONDEADO * precio_hora;
        }

        JOptionPane.showMessageDialog(null, "Vehiculo a nombre de: " + ve.DueÃ±o
                + "\nPatente: " + ve.Patente
                +"\nTipo vehiculo: "+ve.Tipo
                + "\nFecha de ingreso: " + s + "  Hora de ingreso: " + e
                + "\nFecha de salida: " + fecha() + "  Hora de salida: " + hora()
                + "\nLa cant de horas reales en el parking son: "+HORAS_TOTALES+"hs"
                + "\nLa cant de horas a calcular de parking son: " + HORAS_TOTALES_REDONDEADO+"hs"
                + "\nEl precio a pagar es de: $" + costo_total + "\n"
        );
    }

    /*
        TARIFA DE ACUERDO AL TIPO DE VEHICULO
                    AUTO    CAMIONETA   MOTO
        1/2 hora    $50       $70        40
        1 hora      $90       $100       $70
        
     */
    public int calcular_precio_media_hora(String tipo) {
        int valor_media_hora;
        switch (tipo) {
            case "auto":
                valor_media_hora = 50;
                break;
            case "camioneta":
                valor_media_hora = 70;
                break;
            case "moto":
                valor_media_hora = 40;
                break;
            default:
                valor_media_hora = 0;
                break;
        }
        return valor_media_hora;

    }

    public int calcular_precio_hora(String tipo) {
        int valor_hora;
        switch (tipo) {
            case "auto":
                valor_hora = 90;
                break;
            case "camioneta":
                valor_hora = 100;
                break;
            case "moto":
                valor_hora = 70;
                break;
            default:
                valor_hora = 0;
                break;
        }
        return valor_hora;

    }
}
